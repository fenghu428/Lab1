# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ghw3qJm_-Q0tApDzZfy6YZ8eWXSS5qZI
"""
import gradio as gr
import cv2
import numpy as np

# Function to process the image and identify sky pixels
def threshold_and_process_sky(img):
    # Convert the image to grayscale
    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Apply Gaussian blur to the grayscale image (smoothing)
    img_gray = cv2.blur(img_gray, (5, 5))

    # Compute the Laplacian gradient of the smoothed grayscale image
    lap = cv2.Laplacian(img_gray, cv2.CV_8U)

    # Create a binary gradient mask based on the Laplacian image
    gradient_mask = (lap < 8).astype(np.uint8)

    # Define a morphological kernel for erosion
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))

    # Apply morphological erosion to refine the mask
    mask = cv2.morphologyEx(gradient_mask, cv2.MORPH_ERODE, kernel)

    # Process the mask to separate sky from non-sky regions
    h, w = mask.shape
    blurred_mask = cv2.medianBlur(mask, 9)  # Apply median blur to the entire mask to reduce noise
    for i in range(w):
        raw = blurred_mask[:, i]
        try:
            first_zero_index = np.where(raw == 0)[0][0]
            first_one_index = np.where(raw == 1)[0][0]
            if first_zero_index > 20:
                mask[first_one_index:first_zero_index, i] = 1
                mask[first_zero_index:, i] = 0
                mask[:first_one_index, i] = 0
        except:
            continue

    # Apply the processed mask to the original image to extract sky pixels
    after_img = cv2.bitwise_and(img, img, mask=mask)

    return after_img

# Define the Gradio interface
iface = gr.Interface(
    fn=threshold_and_process_sky,
    inputs="image",
    outputs="image",
    title="Sky Pixel Identification",
    description="Upload an image to identify the sky pixels.",
    live=True
)

# Launch the Gradio interface
iface.launch(share=True, debug=True)
